#
# Assemble reads into contigs using megahit.
#

# Makefile preamble.
SHELL := bash
.DELETE_ON_ERROR:
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Micromamba environment.
ENV = bf-assembly-megahit

# Run command within environment.
ENV_RUN = micromamba run -n ${ENV}

# Number of worker threads.
THREADS ?= 8

# Set memory allocation to 50% of machine's capacity.
MEM ?= 0.5

# First of read pair.
R1 ?=

# Second of read pair. If not specified, perform assembly in SE mode.
R2 ?=

# Output directory.
OUTDIR ?= megahit

# Target output.
CONTIGS = ${OUTDIR}/final.contigs.fa

# Kmer options.
KMIN ?= 21
KMAX ?= 141
KSTEP ?= 12

# Megahit options.
FLAGS := -t ${THREADS} -m ${MEM} \
         --k-min ${KMIN} --k-max ${KMAX} --k-step ${KSTEP}

# Compose megahit command.
ifeq ($(R2),)
	MEGAHIT_CMD = megahit ${FLAGS} -r ${R1} -o ${OUTDIR}
else
	MEGAHIT_CMD = megahit ${FLAGS} -1 ${R1} -2 ${R2} -o ${OUTDIR}
endif


help::
	@echo ""
	@echo "megahit.mk: assemble reads into contigs using megahit"
	@echo ""
	@echo "Usage:"
	@echo "  bf-megahit R1=<R1> [options] <command>"
	@echo ""
	@echo "Commands:"
	@echo "  run            assembly reads with megahit"
	@echo "  assemble       alias for 'run'"
	@echo "  stats          compute contig statistics"
	@echo "  install        initialize conda environment"
	@echo "  clean          remove all output generated by this program"
	@echo ""
	@echo "Options:"
	@echo "  R1             first set of pair-end reads in FASTQ format (required)"
	@echo "  R2             second set of pair-end reads in FASTQ format"
	@echo "                 if not provided, program will run in single-end mode"
	@echo "  OUT            a directory path for storing megahit output"
	@echo "  KMIN           minimum k-mer size (default: 21)"
	@echo "  KMAX           maximum k-mer size (default: 141)"
	@echo "  KSTEP          k-mer step size (default: 12)"
	@echo "  MEM            maximum memory allocation (default: 0.5)"
	@echo "  THREADS        number of compute threads (default: 8)"
	@echo ""

# R1 must exist.
${R1}:
	@echo "Error: R1 not found (R1=${R1})"
	@exit -1

# If set, R2 must exist.
ifneq (${R2},)
${R2}:
	@echo "Error: R2 not found (R2=${R2})"
	@exit -1
endif

${CONTIGS}: ${R1} $(if ${R2}, ${R2})
	# Remove output directory if it already exists.
	[ -d $(dir $@) ] && rm -rf $(dir $@)

	# Perform sequence assembly with megahit.
	${ENV_RUN} ${MEGAHIT_CMD}

# Invoked megahit command.
run: ${CONTIGS}
	ls -lh $(dir ${CONTIGS})

stats: ${CONTIGS}
	seqkit stats ${CONTIGS}
	
run!::
	rm -rf ${OUTDIR}

# Alternative target to run!
clean: run!

DEPS := megahit seqkit
# Print command for installing dependencies.
install::
	micromamba create -n ${ENV}
	${ENV_RUN} micromamba install ${DEPS}

.PHONY: help run run! clean install
