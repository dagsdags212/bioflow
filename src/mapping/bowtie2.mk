#
# Map reads against a reference using bowtie2.
#

# Makefile preamble.
SHELL := bash
.DELETE_ON_ERROR:
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Micromamba environment.
ENV = bf-mapping-bowtie2

# Run command within environment.
ENV_RUN = micromamba run -n ${ENV}

# Number of worker threads.
THREADS ?= 4

# First in read pair.
R1 ?=

# Second in read pair, if any.
R2 ?=

# Root name of FASTQ file.
BASENAME = $(notdir $(basename ${R1}))

# The reference genome.
REF ?= refs/genome.fa

# Output directory for BAM files.
DIR ?= bam

# The alignment file.
BAM ?= ${DIR}/${BASENAME}.bt2.bam

# The bowtie2 index prefix.
IDX ?= $(basename ${REF})

# File in the index directory.
IDX_FILE = ${IDX}.1.bt2

# Set attributes for the read group.
ID ?= run1
SM ?= sample1
LB ?= library1
PL ?= ILLUMINA
RG ?= "@RG\tID:${ID}\tSM:${SM}\tLB:${LB}\tPL:${PL}"


# Print the help message.
help::
	@echo ""
	@echo "bowtie2.mk: align reads against a reference using bowtie2 "
	@echo ""
	@echo "Usage:"
	@echo "  make -f bowtie2.mk [options] <command>"
	@echo ""
	@echo "Commands:"
	@echo "  align          map reads against a reference using bowtie2"
	@echo "  run            alias for 'align'"
	@echo "  stats          print out mapping statistics"
	@echo "  coverage       generate a coverage plot for the mapped reads"
	@echo "  install        initialize conda environment"
	@echo "  clean          remove all output generated by this program"
	@echo ""
	@echo "Options:"
	@echo "  REF            a reference file"
	@echo "  R1             first of read-pair in FASTA format"
	@echo "  R2             second of read-pair in FASTA format {optional}"
	@echo "  DIR            a directory path for storing BAM files"
	@echo "  IDX            index of reference file"
	@echo "  COVPLOT        a filepath for saving the coverage plot"
	@echo "  THREADS        number of worker threads {default: 4}"
	@echo ""

# Read 1 must exist.
${R1}:
	@echo "Error: Read 1 not found (R1=${R1})"
	@exit -1

# If set, read 2 must also exist.
ifneq (${R2},)
${R2}:
	@echo "Error: Read 2 not found {R2=${R2}}"
endif

# Reference file must exist.
${REF}:
	@if [ ! -f ${REF} ]; then
		echo "Error: Reference file not found {REF=${REF}}"
		exit -1
	fi

${IDX_FILE}: ${REF}
	# Generate bowtie2 index for the reference.
	${ENV_RUN} bowtie2-build ${REF} ${IDX}

# Invoke reference indexing.
index: ${REF} ${IDX_FILE}
	@echo "bowtie2 index: ${IDX}"

# Remove the index.
index!:
	rm -f ${IDX_FILE}

# Bowtie2 options.
FLAGS := --sensitive-local -p ${THREADS}

# Generate a sorted alignment file.
${BAM}: ${R1} ${R2} ${IDX_FILE}
	# Output directory for BAM files.
	mkdir -p $(dir $@)

	# Map reads with bowtie2.
	${ENV_RUN} bowtie2 ${FLAGS} -x ${IDX} $(if ${R2}, -1 ${R1} -2 ${R2}, -U ${R1}) \
	  | ${ENV_RUN} samtools view -b \
	  | ${ENV_RUN} samtools sort -@ ${THREADS} > $@

# Create the BAM index.
${BAM}.bai: ${BAM}
	${ENV_RUN} samtools index ${BAM}

# Invoke the read mapping rule.
align: ${BAM} ${BAM}.bai
	@ls -lh $^

# Alternative rule for align.
run: align

# Remove output BAM files.
align!: ${BAM} ${BAM}.bai
	rm -rf $^

# Alias for 'align!'.
run!: align!

# Alternative rule for run!
clean: run!

# Generate alignment statistics.
stats:
	@echo "==================== MAPPING STATISTICS ===================="
	${ENV_RUN} samtools flagstat ${BAM}
	echo "============================================================"

# Alias for 'stats'.
stat: stats

COVPLOT ?= ${BASENAME}.covplot.png

${COVPLOT}:
	@echo "Plotting read coverage"
	${ENV_RUN} samtools depth -a ${BAM} | ${ENV_RUN} ${BIOFLOW}/scripts/plot_coverage.py -o $@

coverage: ${COVPLOT}
	@ls -lh $^
	echo ""
	echo "Coverage plot saved at $(abspath $^)"
	echo ""


# TODO: write a test suite

DEPS := bowtie2 samtools pip
PIP := seaborn
# Show installation command
install::
	micromamba create -n ${ENV}
	${ENV_RUN} micromamba install ${DEPS} --yes
	${ENV_RUN} pip install ${PIP}

# Targets that are not files.
.PHONY: help run run! align align! stats stat coverage install index
