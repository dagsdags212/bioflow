#
# Download sequencing reads from the SRA.
#

# Makefile preamble.
SHELL := bash
.DELETE_ON_ERROR:
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Micromamba environment.
ENV = bf-fetch-sra

# Run command within environment.
ENV_RUN = micromamba run -n ${ENV}

# Store the reads in this directory.
DIR ?= reads

# Sequencing run accession.
SRR ?= SRR1554325

# Number of spots to download.
N ?= ALL

# Specify if pair-end or single-end mode.
MODE ?= SE

# Set targets based on download mode.
ifeq (${MODE},SE)
	R1 ?= ${DIR}/${SRR}.fastq
else
	R1 ?= ${DIR}/${SRR}_1.fastq
	R2 ?= ${DIR}/${SRR}_2.fastq
endif

# Print usage.
help:
	@echo ""
	@echo "sra.mk: download FASTQ files from SRA"
	@echo ""
	@echo "Usage:"
	@echo "  bf-sra [options] SRR=<SRR>"
	@echo ""
	@echo "Commands:"
	@echo "  run          download reads with fastq-dump"
	@echo "  aria         download reads with aria2 client"
	@echo "  clean        remove all output generated by this program"
	@echo ""
	@echo "Options:"
	@echo "  SRR          an SRA accession in the format SRX******** (required)"
	@echo "  N            number of reads to download (default: ALL)"
	@echo "  MODE         specify to download reads in pair-end (PE) or single-end (SE) mode"
	@echo "               (default: SE)"
	@echo "  DIR          a directory path for storing reads (default: reads)"
	@echo ""

example:
	@echo ""
	@echo "# Download reads from a single accession, in pair-end mode"
	@echo "make -f sra.mk SRR=SRR1554325 MODE=PE run"
	@echo ""
	@echo "# Specify a path where reads will be stored"
	@echo "make -f sra.mk SRR=SRR1554325 OUTDIR=reads run"
	@echo ""
	@echo "# Only retrieve a subset"
	@echo "make -f sra.mk SRR=SRR1554325 N=10000 run"
	@echo ""

# fastq-dump options.
FLAGS ?= -F

# Download in pair-end mode.
ifeq (${MODE},PE)
	FLAGS += --split-files
endif

# Download only a subset.
ifneq (${N},ALL)
	FLAGS ?= -X ${N}
endif

${R1}:
	# Create output directory.
	mkdir -p ${DIR}

	# Download the reads.
	${ENV_RUN} fastq-dump ${FLAGS} -O ${DIR} ${SRR}

# List the data to check if it is paired.
run: ${R1}
ifdef R2
	ls -lh ${R1} ${R2}
else
	ls -lh ${R1}
endif

# An alias for 'run'.
run: get

# Download using aria2c.
# This process may be more reliable than fastq-dump.
aria:
	# Extract the ftp links for gzipped fastq files and download.
	${ENV_RUN} bio search ${SRR} | jq -r '.[].fastq_url[]' | \
		parallel -j 1 --lb make -f ${ROOT_PATH}/aria.mk URL={} DIR=${DIR} run

# Remove downloaded reads.
clean:
ifdef R2
	rm -f ${R1} ${R2}
else
	rm -f ${R1}
endif

# Alternative rule for clean.
run!: clean

# Run the test suite.
test: clean run

# A list of dependencies to install.
DEPS := sra-tools jq

# Display dependencies.
install::
	micromamba create -n ${ENV}
	${ENV_RUN} micromamba install ${DEPS} --yes
	${ENV_RUN} pip install bio --upgrade

# Non-file targets.
.PHONY: help example run get run! test install
