#
# Perform read trimming and quality filtering.
#

# Makefile preamble.
SHELL := bash
.DELETE_ON_ERROR:
.ONESHELL: .SHELLFLAGS := -eu -o pipefail -c 
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Micromamba environment.
ENV = bf-qc-fastp

# Run command within environment.
ENV_RUN = micromamba run -n ${ENV}

# Outpit directory.
OUT ?= .

# The input pair-end reads.
P1 ?= reads/read_1.fq
P2 ?=

# Extract the extension from PE reads.
EXT1 = $(suffix ${P1})
EXT2 = $(suffix ${P2})

# Build the output name for the read pairs.
R1 = ${OUT}/$(basename ${P1}).trimmed${EXT1}

# Run in single-end mode if P2 is not specified.
ifeq (${P2},)
R2 =
else
R2 = ${OUT}/$(basename ${P2}).trimmed${EXT2}
endif

# Reports generated by fastp.
FASTP_JSON = ${OUT}/$(basename ${R1}).fastp.json
FASTP_HTML = ${OUT}/$(basename ${R1}).fastp.html

# Minimum read length to keep.
MINLEN ?= 50

# Minimum read quality to keep.
MINQUAL ?= 30

# Number of worker threads.
THREADS ?= 4

# Adapter sequence for trimming.
ADAPTER ?=


# Display usage.
help::
	@echo ""
	@echo "fastp.mk: trim reads and generate quality report using fastp"
	@echo ""
	@echo "Usage:"
	@echo "  make -f fastp.mk [options] P1=<P1>"
	@echo ""
	@echo "Commands:"
	@echo "  run                 trim adapers and generate summary report"
	@echo "  install             initialize conda environment"
	@echo "  clean               remove all output generated by this program"
	@echo ""
	@echo "Options:"
	@echo "  P1                  first set in pair-end reads (required)"
	@echo "  P2                  second set in pair-end reads (optional)"
	@echo "  MINLEN              minimum read length to keep (default: 50)"
	@echo "  MINQUAL             minimum read quality to keep (default: 30)"
	@echo "  ADAPTER             an adapter sequence/file to trim"
	@echo "  OUT                 a directory path for storing fastp results (default: .)"
	@echo "  THREADS             number of worker threads to use (default: 4)"
	@echo ""


FASTP_OPTS ?= $(if ${ADAPTER},--adapter_sequence ${ADAPTER}) \
							-w ${THREADS} \
							--cut_right --cut_right_window_size 4 \
							--cut_right_mean_quality ${MINQUAL} \
							--length_required ${MINLEN} \
							-j ${FASTP_JSON} -h ${FASTP_HTML}

# Compose fastp command based on input reads.
ifeq (${P2},)
fastp_cmd = fastp -i ${P1} -o ${R1} ${FASTP_OPTS}
else
fastp_cmd = fastp -i ${P1} -I ${P2} -o ${R1} -O ${R2} ${FASTP_OPTS}
endif

# PE1 must exist.
${P1}:
	@echo "Error: input file for read #1 not found (P1=${P1})"
	@exit -1

# If R2 is set, PE2 must exist.
ifneq (${PE2},)
${P2}:
	@echo "Error: input file for read #2 not found (P2=${P2})"
	@exit -1
endif

# Perform read trimming.
${R1} ${R2}: ${P1} ${P2}
	mkdir -p $(dir ${R1})
	${ENV_RUN} ${fastp_cmd}

# Run the trimming.
run: ${R1} ${R2}
	@ls -lh ${R1} ${R2}

# Remove the trimmed files.
run!:
	rm -f ${R1} ${R2}

# Alternative rule for run!
clean: run!

# Test the module.
test::
	make -f $${BIOFLOW}/src/fetch/sra.mk SRR=SRR1553425 N=1000 MODE=PE run
	make -f $${BIOFLOW}/src/qc/fastp.mk P1=reads/SRR1553425_1.fastq run! run
	make -f $${BIOFLOW}/src/qc/fastp.mk P1=reads/SRR1553425_1.fastq P2=reads/SRR1553425_2.fastq run! run

DEPS := fastp
# Command for installing dependencies.
install::
	micromamba create -n ${ENV} --yes
	${ENV_RUN} micromamba install ${DEPS}

# Rules without target files.
.PHONY: help run run! clean install
