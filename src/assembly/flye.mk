#
# Assemble long reads into contigs using canu.
#

# Makefile preamble.
SHELL := bash
.DELETE_ON_ERROR:
.ONESHELL:
.SHELLFLAGS := -eu -o pipefail -c
MAKEFLAGS += --warn-undefined-variables --no-print-directory

# Micromamba environment.
ENV = bf-assembly-flye

# Run command within environment.
ENV_RUN = micromamba run -n ${ENV}

# Number of worker threads.
THREADS ?= 8

# Long read file.
R1 ?=

# Output directory.
OUT ?= flye

# Target output.
CONTIGS = ${OUTDIR}/assembly.fasta

# Estimated genome size.
GENOME_SIZE ?=

# Supported long-read sequencing platforms.
SUPPORTED_PLATFORMS := pacbio ont

# Selected platform.
PLATFORM ?= ont

# Number of polishing iterations.
ITER ?= 5

# Megahit options.
FLAGS := -t ${THREADS} -i ${ITER} -g ${GENOME_SIZE}

# Conditional flags.
ifeq (${PLATFORM},pacbio)
	FLAGS += --pacbio-raw ${R1}
else ifeq (${PLATFORM},ont)
	FLAGS += --nano-raw ${R1}
else
	@echo "Error: platform not specified or invalid, choose [pacbio|ont]"
	@exit -1
endif

# Compose flye command.
FLYE_CMD = flye ${FLAGS} -o ${OUTDIR}

help::
	@echo "flye.mk: assemble long reads into contigs using flye"
	@echo ""
	@echo "Usage:"
	@echo "  bf-flye R1=<R1> [options] <command>"
	@echo ""
	@echo "Commands:"
	@echo "  run             perform long-read assembly"
	@echo "  install         initialize conda environment"
	@echo "  clean           remove all output generated by this program"
	@echo ""
	@echo "Options:"
	@echo "  R1              long-read file in FASTQ format"
	@echo "  OUT             a directory path for storing flye output (default: flye)"
	@echo "  PLATFORM        sequencing platform used to generate long reads (default: ont)"
	@echo "  ITER            number of refinement iterations (default: 5)"
	@echo "  THREADS         number of compute threads to use (default: 8)"
	@echo ""

# R1 must exist.
${R1}:
	@echo "Error: R1 not found (R1=${R1})"
	@exit -1

${CONTIGS}: ${R1}
	# Remove output directory if it already exists.
	[ -z $(dir $@) ] && rm -rf $(dir $@)

	# Create output directory.
	mkdir -p $(dir $@)

	# Perform sequence assembly with flye.
	${ENV_RUN} ${FLYE_CMD}

# Invoked megahit command.
run: ${CONTIGS}
	ls -lh $(dir $^)

stats:
	seqkit stats ${CONTIGS}
	
run!::
	rm -rf ${OUTDIR}

# Alternative target to run!
clean: run!

DEPS := flye seqkit
# Print command for installing dependencies.
install::
	micromamba create -n ${ENV}
	${ENV_RUN} micromamba install ${DEPS}

.PHONY: help run stats run! clean install
